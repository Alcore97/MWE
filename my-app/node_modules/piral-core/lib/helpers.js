"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPiletOptions = exports.extendSharedDependencies = exports.setSharedDependencies = void 0;
var tslib_1 = require("tslib");
var react_atom_1 = require("@dbeining/react-atom");
var piral_base_1 = require("piral-base");
var modules_1 = require("./modules");
/**
 * Creates a dependency getter that sets the shared dependencies explicitly.
 * Overrides the potentially set shared dependencies from the Piral CLI, but
 * keeps all global dependencies such as react, react-dom, ...
 * @param sharedDependencies The shared dependencies to declare.
 */
function setSharedDependencies(sharedDependencies) {
    var dependencies = tslib_1.__assign(tslib_1.__assign({}, modules_1.globalDependencies), sharedDependencies);
    return function () { return dependencies; };
}
exports.setSharedDependencies = setSharedDependencies;
/**
 * Creates a dependency getter that extends the shared dependencies with additional dependencies.
 * @param additionalDependencies The additional dependencies to declare.
 */
function extendSharedDependencies(additionalDependencies) {
    var dependencies = tslib_1.__assign(tslib_1.__assign({}, modules_1.getLocalDependencies()), additionalDependencies);
    return function () { return dependencies; };
}
exports.extendSharedDependencies = extendSharedDependencies;
function createPiletOptions(_a) {
    var context = _a.context, createApi = _a.createApi, availablePilets = _a.availablePilets, fetchDependency = _a.fetchDependency, getDependencies = _a.getDependencies, loaderConfig = _a.loaderConfig, loadPilet = _a.loadPilet, strategy = _a.strategy, loaders = _a.loaders, requestPilets = _a.requestPilets;
    getDependencies = piral_base_1.getDependencyResolver(modules_1.globalDependencies, getDependencies);
    loadPilet = piral_base_1.extendLoader(loadPilet !== null && loadPilet !== void 0 ? loadPilet : piral_base_1.getDefaultLoader(getDependencies, fetchDependency, loaderConfig), loaders);
    // if we build the debug version of piral (debug and emulator build)
    if (process.env.DEBUG_PIRAL) {
        var installPiralDebug = require('piral-debug-utils').installPiralDebug;
        installPiralDebug({
            context: context,
            createApi: createApi,
            getDependencies: getDependencies,
            loadPilet: loadPilet,
            requestPilets: requestPilets,
        });
        // we watch the state container for changes
        react_atom_1.addChangeHandler(context.state, 'debugging', function (_a) {
            var current = _a.current, previous = _a.previous;
            var viewState = sessionStorage.getItem('dbg:view-state') !== 'off';
            if (viewState) {
                var infos = new Error().stack;
                if (infos) {
                    // Chrome, Firefox, ... (full capability)
                    var lastLine = infos.split('\n')[7];
                    if (lastLine) {
                        var action = lastLine.replace(/^\s+at\s+(Atom\.|Object\.)?/, '');
                        console.group("%c Piral State Change %c " + new Date().toLocaleTimeString(), 'color: gray; font-weight: lighter;', 'color: black; font-weight: bold;');
                        console.log('%c Previous', "color: #9E9E9E; font-weight: bold", previous);
                        console.log('%c Action', "color: #03A9F4; font-weight: bold", action);
                        console.log('%c Next', "color: #4CAF50; font-weight: bold", current);
                        console.groupEnd();
                    }
                }
                else {
                    // IE 11, ... (does not know colors etc.)
                    console.log('Changed state', previous, current);
                }
            }
        });
    }
    if (process.env.DEBUG_PILET) {
        var withEmulatorPilets = require('piral-debug-utils').withEmulatorPilets;
        requestPilets = withEmulatorPilets(requestPilets, {
            inject: context.injectPilet,
            createApi: createApi,
            loadPilet: loadPilet,
        });
    }
    return {
        config: loaderConfig,
        strategy: strategy,
        loadPilet: loadPilet,
        createApi: createApi,
        getDependencies: getDependencies,
        pilets: availablePilets,
        fetchPilets: requestPilets,
        dependencies: modules_1.globalDependencies,
    };
}
exports.createPiletOptions = createPiletOptions;
//# sourceMappingURL=helpers.js.map